/* Generated By:JavaCC: Do not edit this line. CelestaParser.java */
package ru.curs.celesta.score;
//CHECKSTYLE:OFF
public class CelestaParser implements CelestaParserConstants {

/*Metamodel. Root rule.*/
  final public Grain grain(Score s, String name) throws ParseException {
   /*This work is dedicated to Maria, my misterious muse :-) 
     Ivan Ponomarev, June 2013.*/

   Grain g = new Grain(s, name);
   Token t;
   Token doc = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CELESTA_DOC:
      doc = jj_consume_token(CELESTA_DOC);
                         g.setCelestaDocLexem(doc.toString());
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(K_CREATE);
    t = jj_consume_token(S_IDENTIFIER);
                       if (!"GRAIN".equalsIgnoreCase(t.toString()))
      {if (true) throw new ParseException(String.format(
          "Error: expected 'create GRAIN' at the beginning of the grain '%s' definition.", name));}
    t = jj_consume_token(S_IDENTIFIER);
                       if (!name.equalsIgnoreCase(t.toString())) {if (true) throw new ParseException(String.format(
      "Error: expected 'create grain %s' at the beginning of the grain '%s' definition, found '%s'.", name, name, t.toString()));}
    t = jj_consume_token(S_IDENTIFIER);
                       if (!"VERSION".equalsIgnoreCase(t.toString())) {if (true) throw new ParseException(String.format(
      "Error: expected 'create grain %s VERSION' at the beginning of the grain '%s' definition.", name, name));}
    t = jj_consume_token(S_CHAR_LITERAL);
                         g.setVersion(t.toString());
    jj_consume_token(62);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CREATE:
      case K_ALTER:
      case CELESTA_DOC:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_CREATE:
      case CELESTA_DOC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case CELESTA_DOC:
          doc = jj_consume_token(CELESTA_DOC);
          break;
        default:
          jj_la1[2] = jj_gen;
          ;
        }
        jj_consume_token(K_CREATE);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_TABLE:
          createTable(g, doc == null? null: doc.toString());
          break;
        case K_INDEX:
          createIndex(g, doc == null? null: doc.toString());
          break;
        case K_VIEW:
          createView(g, doc == null? null: doc.toString());
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                        doc = null;
        break;
      case K_ALTER:
        jj_consume_token(K_ALTER);
        alterTable(g);
        break;
      default:
        jj_la1[4] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(62);
    }
    jj_consume_token(0);
   g.completeParsing();
   {if (true) return g;}
    throw new Error("Missing return statement in function");
  }

  final public void createTable(Grain g, String doc) throws ParseException {
        Table table = null;
        Token tableName = null;
    jj_consume_token(K_TABLE);
    tableName = jj_consume_token(S_IDENTIFIER);
                                    table = new Table(g, tableName.toString());
                                    table.setCelestaDocLexem(doc);
    jj_consume_token(63);
    tableConstituent(table);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 64:
        ;
        break;
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(64);
      tableConstituent(table);
    }
    jj_consume_token(65);
          table.finalizePK();
  }

  final public void tableConstituent(Table table) throws ParseException {
  String name;
  ForeignKey fk;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
    case CELESTA_DOC:
      columnDefinition(table);
      break;
    case K_PRIMARY:
    case K_FOREIGN:
    case K_CONSTRAINT:
      name = constraint(table.getGrain());
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_PRIMARY:
        primaryKey(table);
                             table.setPkConstraintName(name);
        break;
      case K_FOREIGN:
        fk = foreignKey(table);
                                  fk.setConstraintName(name);
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void columnDefinition(Table table) throws ParseException {
   Column column = null;
   Token t;
   Token length = null;
   boolean nullable;
   boolean negative = false;
   boolean pk = false;
   ForeignKey fk = null;
   String name;
   Token doc = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CELESTA_DOC:
      doc = jj_consume_token(CELESTA_DOC);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    t = jj_consume_token(S_IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_INT:
      jj_consume_token(K_INT);
                       column = new IntegerColumn(table, t.toString()); t = null;
      nullable = nullable();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DEFAULT:
      case K_IDENTITY:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DEFAULT:
          jj_consume_token(K_DEFAULT);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 66:
            jj_consume_token(66);
                                                         negative = true;
            break;
          default:
            jj_la1[9] = jj_gen;
            ;
          }
          t = jj_consume_token(S_INTEGER);
          break;
        case K_IDENTITY:
          t = jj_consume_token(K_IDENTITY);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_NOT:
            jj_consume_token(K_NOT);
            jj_consume_token(K_NULL);
                                                                                                                                  nullable = false;
            break;
          default:
            jj_la1[10] = jj_gen;
            ;
          }
          break;
        default:
          jj_la1[11] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[12] = jj_gen;
        ;
      }
      break;
    case K_REAL:
      jj_consume_token(K_REAL);
                       column = new FloatingColumn(table, t.toString()); t = null;
      nullable = nullable();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DEFAULT:
        jj_consume_token(K_DEFAULT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 66:
          jj_consume_token(66);
                                     negative = true;
          break;
        default:
          jj_la1[13] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_INTEGER:
          t = jj_consume_token(S_INTEGER);
          break;
        case S_DOUBLE:
          t = jj_consume_token(S_DOUBLE);
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      break;
    case K_NVARCHAR:
      jj_consume_token(K_NVARCHAR);
                      column = new StringColumn(table, t.toString()); t = null;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 63:
        jj_consume_token(63);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_INTEGER:
          length = jj_consume_token(S_INTEGER);
          break;
        case K_MAX:
          length = jj_consume_token(K_MAX);
          break;
        default:
          jj_la1[16] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        jj_consume_token(65);
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
                           ((StringColumn) column).setLength(length.toString());
      nullable = nullable();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DEFAULT:
        jj_consume_token(K_DEFAULT);
        t = jj_consume_token(S_CHAR_LITERAL);
        break;
      default:
        jj_la1[18] = jj_gen;
        ;
      }
      break;
    case K_IMAGE:
      jj_consume_token(K_IMAGE);
                       column = new BinaryColumn(table, t.toString()); t = null;
      nullable = nullable();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DEFAULT:
        jj_consume_token(K_DEFAULT);
        t = jj_consume_token(S_BINARY_LITERAL);
        break;
      default:
        jj_la1[19] = jj_gen;
        ;
      }
      break;
    case K_DATETIME:
      jj_consume_token(K_DATETIME);
                       column = new DateTimeColumn(table, t.toString()); t = null;
      nullable = nullable();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DEFAULT:
        jj_consume_token(K_DEFAULT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_CHAR_LITERAL:
          t = jj_consume_token(S_CHAR_LITERAL);
          break;
        case K_GETDATE:
          t = jj_consume_token(K_GETDATE);
          jj_consume_token(63);
          jj_consume_token(65);
          break;
        default:
          jj_la1[20] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[21] = jj_gen;
        ;
      }
      break;
    case K_BIT:
      jj_consume_token(K_BIT);
                       column = new BooleanColumn(table, t.toString()); t = null;
      nullable = nullable();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DEFAULT:
        jj_consume_token(K_DEFAULT);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_CHAR_LITERAL:
          t = jj_consume_token(S_CHAR_LITERAL);
          break;
        case S_INTEGER:
          t = jj_consume_token(S_INTEGER);
          break;
        default:
          jj_la1[22] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[23] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    name = constraint(table.getGrain());
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_PRIMARY:
      jj_consume_token(K_PRIMARY);
      jj_consume_token(K_KEY);
               pk = true; table.setPkConstraintName(name);
      name = constraint(table.getGrain());
      break;
    default:
      jj_la1[25] = jj_gen;
      ;
    }
      column.setNullableAndDefault(nullable, t == null? null: ((negative? "-": "") + t.toString()));
          column.setCelestaDocLexem(doc == null? null:doc.toString());
          if (pk) {
            table.addPK(column.getName());
            table.finalizePK();
          }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_FOREIGN:
      jj_consume_token(K_FOREIGN);
      jj_consume_token(K_KEY);
                              fk = new ForeignKey(table); fk.addColumn(column.getName()); fk.setConstraintName(name);
      references(fk);
      break;
    default:
      jj_la1[26] = jj_gen;
      ;
    }
  }

  final public boolean nullable() throws ParseException {
  boolean result = true;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
    case K_NULL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NULL:
        jj_consume_token(K_NULL);
                   result = true;
        break;
      case K_NOT:
        jj_consume_token(K_NOT);
        jj_consume_token(K_NULL);
                                                      result = false;
        break;
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[28] = jj_gen;
      ;
    }
                                                                          {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public void primaryKey(Table table) throws ParseException {
                              Token t;
    jj_consume_token(K_PRIMARY);
    jj_consume_token(K_KEY);
    jj_consume_token(63);
    t = jj_consume_token(S_IDENTIFIER);
                                              table.addPK(t.toString());
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 64:
        ;
        break;
      default:
        jj_la1[29] = jj_gen;
        break label_3;
      }
      jj_consume_token(64);
      t = jj_consume_token(S_IDENTIFIER);
                                              table.addPK(t.toString());
    }
    jj_consume_token(65);
    table.finalizePK();
  }

  final public ForeignKey foreignKey(Table table) throws ParseException {
  Token t;
  ForeignKey fk;
    jj_consume_token(K_FOREIGN);
    jj_consume_token(K_KEY);
                     fk = new ForeignKey(table);
    jj_consume_token(63);
    t = jj_consume_token(S_IDENTIFIER);
                           fk.addColumn(t.toString());
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 64:
        ;
        break;
      default:
        jj_la1[30] = jj_gen;
        break label_4;
      }
      jj_consume_token(64);
      t = jj_consume_token(S_IDENTIFIER);
                           fk.addColumn(t.toString());
    }
    jj_consume_token(65);
    references(fk);
  {if (true) return fk;}
    throw new Error("Missing return statement in function");
  }

  final public void references(ForeignKey fk) throws ParseException {
  Token t;
  Token t2 = null;
  FKRule action;
    jj_consume_token(K_REFERENCES);
    t = jj_consume_token(S_IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 67:
      jj_consume_token(67);
      t2 = jj_consume_token(S_IDENTIFIER);
      break;
    default:
      jj_la1[31] = jj_gen;
      ;
    }
    if (t2 == null)
      fk.setReferencedTable("", t.toString());
        else
          fk.setReferencedTable(t.toString(), t2.toString());
    jj_consume_token(63);
    t = jj_consume_token(S_IDENTIFIER);
                          fk.addReferencedColumn(t.toString());
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 64:
        ;
        break;
      default:
        jj_la1[32] = jj_gen;
        break label_5;
      }
      jj_consume_token(64);
      t = jj_consume_token(S_IDENTIFIER);
                           fk.addReferencedColumn(t.toString());
    }
    jj_consume_token(65);
 fk.finalizeReference();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_ON:
      jj_consume_token(K_ON);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_UPDATE:
        jj_consume_token(K_UPDATE);
        action = action();
                                  fk.setUpdateRule(action);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ON:
          jj_consume_token(K_ON);
          jj_consume_token(K_DELETE);
          action = action();
                                          fk.setDeleteRule(action);
          break;
        default:
          jj_la1[33] = jj_gen;
          ;
        }
        break;
      case K_DELETE:
        jj_consume_token(K_DELETE);
        action = action();
                                  fk.setDeleteRule(action);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_ON:
          jj_consume_token(K_ON);
          jj_consume_token(K_UPDATE);
          action = action();
                                          fk.setUpdateRule(action);
          break;
        default:
          jj_la1[34] = jj_gen;
          ;
        }
        break;
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
  }

  final public FKRule action() throws ParseException {
  FKRule result;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NO:
      jj_consume_token(K_NO);
      jj_consume_token(K_ACTION);
                        result = FKRule.NO_ACTION;
      break;
    case K_SET:
      jj_consume_token(K_SET);
      jj_consume_token(K_NULL);
                       result =  FKRule.SET_NULL;
      break;
    case K_CASCADE:
      jj_consume_token(K_CASCADE);
                         result =  FKRule.CASCADE;
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return result;}
    throw new Error("Missing return statement in function");
  }

  final public void createIndex(Grain g, String doc) throws ParseException {
Token indexName;
Token tableName;
Token columnName;
Index ind;
    jj_consume_token(K_INDEX);
    indexName = jj_consume_token(S_IDENTIFIER);
    jj_consume_token(K_ON);
    tableName = jj_consume_token(S_IDENTIFIER);
    ind = new Index(g, tableName.toString(), indexName.toString());
    ind.setCelestaDocLexem(doc);
    jj_consume_token(63);
    columnName = jj_consume_token(S_IDENTIFIER);
                                    ind.addColumn(columnName.toString());
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 64:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_6;
      }
      jj_consume_token(64);
      columnName = jj_consume_token(S_IDENTIFIER);
                                                                                                            ind.addColumn(columnName.toString());
    }
    jj_consume_token(65);
    ind.finalizeIndex();
  }

  final public void alterTable(Grain g) throws ParseException {
  Token t;
  Table table;
  String name;
  ForeignKey fk;
    jj_consume_token(K_TABLE);
    t = jj_consume_token(S_IDENTIFIER);
  table = g.getTable(t.toString());
    jj_consume_token(K_ADD);
    name = constraint(g);
    fk = foreignKey(table);
                                                     fk.setConstraintName(name);
  }

  final public String constraint(Grain g) throws ParseException {
Token t = null;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_CONSTRAINT:
      jj_consume_token(K_CONSTRAINT);
      t = jj_consume_token(S_IDENTIFIER);
      break;
    default:
      jj_la1[39] = jj_gen;
      ;
    }
if (t == null)
  {if (true) return null;}
else {
  g.addConstraintName(t.toString());
  {if (true) return t.toString();}
}
    throw new Error("Missing return statement in function");
  }

  final public void createView(Grain g, String doc) throws ParseException {
        View view = null;
        Token viewName = null;
    jj_consume_token(K_VIEW);
    viewName = jj_consume_token(S_IDENTIFIER);
    jj_consume_token(K_AS);
                                           view = new View(g, viewName.toString());
                                    view.setCelestaDocLexem(doc);
    select();
  }

  final public void sqlExpression() throws ParseException {
    sqlAndExpression();
    label_7:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_OR:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_7;
      }
      jj_consume_token(K_OR);
      sqlAndExpression();
    }
  }

  final public void sqlAndExpression() throws ParseException {
    sqlUnaryLogicalExpression();
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AND:
        ;
        break;
      default:
        jj_la1[41] = jj_gen;
        break label_8;
      }
      jj_consume_token(K_AND);
      sqlUnaryLogicalExpression();
    }
  }

  final public void sqlUnaryLogicalExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_NOT:
      jj_consume_token(K_NOT);
      break;
    default:
      jj_la1[42] = jj_gen;
      ;
    }
    sqlRelationalExpression();
  }

  final public void sqlRelationalExpression() throws ParseException {
    sqlSimpleExpression();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_IN:
    case K_LIKE:
    case K_BETWEEN:
    case K_IS:
    case 68:
    case 69:
    case 70:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 68:
      case 69:
      case 70:
        relop();
        sqlSimpleExpression();
        break;
      case K_IN:
        jj_consume_token(K_IN);
        jj_consume_token(63);
        sqlExpression();
        label_9:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 64:
            ;
            break;
          default:
            jj_la1[43] = jj_gen;
            break label_9;
          }
          jj_consume_token(64);
          sqlExpression();
        }
        jj_consume_token(65);
        break;
      case K_BETWEEN:
        jj_consume_token(K_BETWEEN);
        sqlSimpleExpression();
        jj_consume_token(K_AND);
        sqlSimpleExpression();
        break;
      case K_LIKE:
        jj_consume_token(K_LIKE);
        sqlSimpleExpression();
        break;
      case K_IS:
        jj_consume_token(K_IS);
        jj_consume_token(K_NULL);
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[45] = jj_gen;
      ;
    }
  }

  final public void relop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 68:
      jj_consume_token(68);
      break;
    case 69:
      jj_consume_token(69);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 68:
        jj_consume_token(68);
        break;
      default:
        jj_la1[46] = jj_gen;
        ;
      }
      break;
    case 70:
      jj_consume_token(70);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 68:
      case 69:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 68:
          jj_consume_token(68);
          break;
        case 69:
          jj_consume_token(69);
          break;
        default:
          jj_la1[47] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[48] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[49] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void sqlSimpleExpression() throws ParseException {
    sqlMultiplicativeExpression();
    label_10:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 66:
      case 71:
        ;
        break;
      default:
        jj_la1[50] = jj_gen;
        break label_10;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 71:
        jj_consume_token(71);
        break;
      case 66:
        jj_consume_token(66);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      sqlMultiplicativeExpression();
    }
  }

  final public void sqlMultiplicativeExpression() throws ParseException {
    sqlUnaryExpression();
    label_11:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 72:
      case 73:
        ;
        break;
      default:
        jj_la1[52] = jj_gen;
        break label_11;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 72:
        jj_consume_token(72);
        break;
      case 73:
        jj_consume_token(73);
        break;
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      sqlUnaryExpression();
    }
  }

  final public void sqlUnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 66:
    case 71:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 71:
        jj_consume_token(71);
        break;
      case 66:
        jj_consume_token(66);
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      sqlPrimaryExpression();
      break;
    case K_NULL:
    case S_DOUBLE:
    case S_INTEGER:
    case S_IDENTIFIER:
    case S_CHAR_LITERAL:
    case 63:
      sqlPrimaryExpression();
      break;
    default:
      jj_la1[55] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void sqlPrimaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_INTEGER:
      jj_consume_token(S_INTEGER);
      break;
    case S_DOUBLE:
      jj_consume_token(S_DOUBLE);
      break;
    case S_CHAR_LITERAL:
      jj_consume_token(S_CHAR_LITERAL);
      break;
    case K_NULL:
      jj_consume_token(K_NULL);
      break;
    case 63:
      jj_consume_token(63);
      sqlExpression();
      jj_consume_token(65);
      break;
    case S_IDENTIFIER:
      fieldReference();
      break;
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void fieldReference() throws ParseException {
    jj_consume_token(S_IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 67:
      jj_consume_token(67);
      jj_consume_token(S_IDENTIFIER);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 67:
        jj_consume_token(67);
        jj_consume_token(S_IDENTIFIER);
        break;
      default:
        jj_la1[57] = jj_gen;
        ;
      }
      break;
    default:
      jj_la1[58] = jj_gen;
      ;
    }
  }

  final public void select() throws ParseException {
    jj_consume_token(K_SELECT);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_DISTINCT:
      jj_consume_token(K_DISTINCT);
      break;
    default:
      jj_la1[59] = jj_gen;
      ;
    }
    selectItem();
    label_12:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 64:
        ;
        break;
      default:
        jj_la1[60] = jj_gen;
        break label_12;
      }
      jj_consume_token(64);
      selectItem();
    }
    jj_consume_token(K_FROM);
    fromClause();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_WHERE:
      jj_consume_token(K_WHERE);
      sqlExpression();
      break;
    default:
      jj_la1[61] = jj_gen;
      ;
    }
  }

  final public void selectItem() throws ParseException {
    fieldReference();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AS:
      jj_consume_token(K_AS);
      break;
    default:
      jj_la1[62] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      break;
    default:
      jj_la1[63] = jj_gen;
      ;
    }
  }

  final public void tableReference() throws ParseException {
    jj_consume_token(S_IDENTIFIER);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 67:
      jj_consume_token(67);
      jj_consume_token(S_IDENTIFIER);
      break;
    default:
      jj_la1[64] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_AS:
      jj_consume_token(K_AS);
      break;
    default:
      jj_la1[65] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case S_IDENTIFIER:
      jj_consume_token(S_IDENTIFIER);
      break;
    default:
      jj_la1[66] = jj_gen;
      ;
    }
  }

  final public void fromClause() throws ParseException {
    tableReference();
    label_13:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_INNER:
      case K_LEFT:
      case K_RIGHT:
      case K_FULL:
        ;
        break;
      default:
        jj_la1[67] = jj_gen;
        break label_13;
      }
      join();
    }
  }

  final public void join() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case K_INNER:
      jj_consume_token(K_INNER);
      break;
    case K_LEFT:
      jj_consume_token(K_LEFT);
      break;
    case K_RIGHT:
      jj_consume_token(K_RIGHT);
      break;
    case K_FULL:
      jj_consume_token(K_FULL);
      break;
    default:
      jj_la1[68] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(K_JOIN);
    tableReference();
    jj_consume_token(K_ON);
    sqlExpression();
  }

  /** Generated Token Manager. */
  public CelestaParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[69];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x8000020,0x0,0x1c0,0x8000020,0x0,0x30000,0x20030000,0x0,0x0,0x800,0x4400,0x4400,0x0,0x0,0x400,0x2000,0x0,0x400,0x400,0x8000,0x400,0x0,0x400,0x0,0x10000,0x20000,0x1800,0x1800,0x0,0x0,0x0,0x0,0x100000,0x100000,0x600000,0x100000,0x6800000,0x0,0x20000000,0x80000000,0x0,0x800,0x0,0x40000000,0x40000000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1000,0x1000,0x0,0x0,0x0,0x0,0x0,0x200,0x0,0x0,0x200,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x8000000,0x8000000,0x8000000,0x0,0x8000000,0x0,0x0,0x8800000,0x8000000,0x0,0x0,0x0,0x0,0x0,0x180000,0x0,0x100000,0x80000000,0x0,0x0,0x2000000,0x0,0x2100000,0x0,0x7e000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0xe,0xe,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x82980000,0x82980000,0x0,0x0,0x20,0x0,0x1000,0x0,0x800000,0x0,0x0,0x800000,0x780,0x780,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x4,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x1,0x1,0x8,0x1,0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x1,0x70,0x70,0x10,0x30,0x30,0x70,0x84,0x84,0x300,0x300,0x84,0x84,0x0,0x8,0x8,0x0,0x1,0x0,0x0,0x0,0x8,0x0,0x0,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public CelestaParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CelestaParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CelestaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public CelestaParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CelestaParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public CelestaParser(CelestaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CelestaParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 69; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[74];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 69; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 74; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
