options{
    IGNORE_CASE=true ;
	UNICODE_INPUT=true;
    STATIC=false;
    FORCE_LA_CHECK=true;
    SUPPORT_CLASS_VISIBILITY_PUBLIC=false;
}

PARSER_BEGIN(CelestaParser)
package ru.curs.celesta.score;

import java.util.List;
import java.util.ArrayList;
//CHECKSTYLE:OFF
public class CelestaParser{
}
PARSER_END(CelestaParser)

SKIP:
{
    " "
|   "\t"
|   "\r"
|   "\n"
}

TOKEN: /* SQL keywords */ 
{
    <K_CREATE:  "CREATE">
|   <K_TABLE:   "TABLE">
|   <K_INDEX:   "INDEX">
|   <K_VIEW:    "VIEW">
|   <K_AS:      "AS">
|   <K_DEFAULT: "DEFAULT">
|   <K_NOT:     "NOT">
|   <K_NULL:    "NULL">
|   <K_MAX:     "MAX">
|   <K_IDENTITY: "IDENTITY">
|   <K_GETDATE: "GETDATE">
|   <K_PRIMARY: "PRIMARY">
|   <K_FOREIGN: "FOREIGN">
|   <K_KEY:     "KEY">
|   <K_REFERENCES: "REFERENCES">
|   <K_ON:       "ON">
|   <K_UPDATE:   "UPDATE">
|   <K_DELETE:   "DELETE">
|   <K_NO:       "NO">
|   <K_ACTION:   "ACTION">
|   <K_SET:      "SET">
|   <K_CASCADE:  "CASCADE">
|   <K_ALTER:    "ALTER">
|   <K_ADD:      "ADD">
|   <K_CONSTRAINT:"CONSTRAINT">
|   <K_IN:       "IN">
|   <K_OR:       "OR">
|   <K_AND:      "AND">
|   <K_LIKE:     "LIKE">
|   <K_BETWEEN:  "BETWEEN">
|   <K_IS:       "IS">
|   <K_SELECT:   "SELECT">
|   <K_DISTINCT: "DISTINCT">
|   <K_FROM:     "FROM">
|   <K_INNER:    "INNER">
|   <K_LEFT:     "LEFT">
|   <K_RIGHT:    "RIGHT">
|   <K_FULL:     "FULL">
|   <K_JOIN:     "JOIN">
|   <K_WHERE:    "WHERE">
}

TOKEN: /* Datatypes */
{
   <K_INT:       "INT">
|  <K_REAL:      "REAL">
|  <K_NVARCHAR:  "NVARCHAR">
|  <K_IMAGE:     "IMAGE">
|  <K_DATETIME:  "DATETIME">
|  <K_BIT:       "BIT">
}

TOKEN : /* Numeric literals */
{
	< S_DOUBLE: ((<S_INTEGER>)? "." <S_INTEGER> ( ["e","E"] ([ "-","+"])? <S_INTEGER> )? 
				|
				(<S_INTEGER>)+ (".")? ["e","E"] ([ "-","+"])? (<S_INTEGER>)+
				)>
  | 	< S_INTEGER: ( <DIGIT> )+ >
  | 	< #DIGIT: ["0" - "9"] >
  |     <S_BINARY_LITERAL: "0x"(["a"-"f", "A"-"F", "0"-"9"]["a"-"f", "A"-"F", "0"-"9"])+>
}


TOKEN:
{
	< S_IDENTIFIER: ( <LETTER> )+ ( <DIGIT> | <LETTER> )* >
| 	< #LETTER: ["a"-"z", "A"-"Z", "_"] >
|   < S_CHAR_LITERAL: "'" (~["'"])* "'" ("'" (~["'"])* "'")*>
|   < S_QUOTED_IDENTIFIER: "\"" (~["\n","\r","\""])* "\"" | ("`" (~["\n","\r","`"])* "`") >
|   < CELESTA_DOC: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}


SPECIAL_TOKEN:
{
   <LINE_COMMENT: "--"(~["\r","\n"])*>
|  <MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
}

/*Metamodel. Root rule.*/
Grain grain(Score s, String name):
{
   /*This work is dedicated to Maria, my misterious muse :-) 
     Ivan Ponomarev, June 2013.*/
	 
   Grain g = new Grain(s, name);
   Token t;
   Token doc = null;
}
{ 
   [doc = <CELESTA_DOC> {g.setCelestaDocLexem(doc.toString());}]
   <K_CREATE> 
   t = <S_IDENTIFIER> {if (!"GRAIN".equalsIgnoreCase(t.toString())) 
      throw new ParseException(String.format(
	  "Error: expected 'create GRAIN' at the beginning of the grain '%s' definition.", name));}
   t = <S_IDENTIFIER> {if (!name.equalsIgnoreCase(t.toString())) throw new ParseException(String.format(
      "Error: expected 'create grain %s' at the beginning of the grain '%s' definition, found '%s'.", name, name, t.toString()));}
   t = <S_IDENTIFIER> {if (!"VERSION".equalsIgnoreCase(t.toString())) throw new ParseException(String.format(
      "Error: expected 'create grain %s VERSION' at the beginning of the grain '%s' definition.", name, name));}
   t = <S_CHAR_LITERAL> {g.setVersion(t.toString());}";"
   ( ( ([doc = <CELESTA_DOC>]<K_CREATE> (
                    createTable(g, doc == null? null: doc.toString()) 
                  | createIndex(g, doc == null? null: doc.toString())
				  | createView (g, doc == null? null: doc.toString())) {doc = null;}) 
	 | (<K_ALTER>   alterTable(g))) ";")*
   <EOF>
   {
   g.completeParsing();
   return g;
   }
}

void createTable(Grain g, String doc):
{
	Table table = null;
	Token tableName = null;
}
{
    <K_TABLE>
	tableName = <S_IDENTIFIER> {table = new Table(g, tableName.toString());
	                            table.setCelestaDocLexem(doc);}
	"("
		tableConstituent(table)	("," tableConstituent(table))*
	")"
	{
	  table.finalizePK();
    }
}

void tableConstituent(Table table):{
  String name; 
  ForeignKey fk;
}
{
     columnDefinition(table) 
   | name = constraint(table.getGrain()) (
          primaryKey(table) {table.setPkConstraintName(name);}
        | fk = foreignKey(table) {fk.setConstraintName(name);})
}

void columnDefinition(Table table):
{
   Column column = null;
   Token t;
   Token length = null;
   boolean nullable;
   boolean negative = false;
   boolean pk = false;
   ForeignKey fk = null;
   String name;
   Token doc = null;
}
{
 [doc = <CELESTA_DOC>]
  t = <S_IDENTIFIER>
    (  (<K_INT>       {column = new IntegerColumn(table, t.toString()); t = null; } 
	       nullable = nullable() [(<K_DEFAULT> ["-" {negative = true;}] t = <S_INTEGER>)|(t = <K_IDENTITY> [<K_NOT> <K_NULL> {nullable = false;}])]
	    )
    |  (<K_REAL>      {column = new FloatingColumn(table, t.toString()); t = null;} 
	       nullable = nullable() 
		  [<K_DEFAULT> ["-" {negative = true;}] (t = <S_INTEGER> | t = <S_DOUBLE>)])
    |  (<K_NVARCHAR> {column = new StringColumn(table, t.toString()); t = null; } 
	          ["("  (length = <S_INTEGER> | length = <K_MAX>) ")"]  
			  {((StringColumn) column).setLength(length.toString());}
	       nullable = nullable() 
		  [<K_DEFAULT> t = <S_CHAR_LITERAL>])
    |  (<K_IMAGE>     {column = new BinaryColumn(table, t.toString()); t = null;} 
	       nullable = nullable()
		  [<K_DEFAULT> t = <S_BINARY_LITERAL>])
    |  (<K_DATETIME>  {column = new DateTimeColumn(table, t.toString()); t = null;} 
	       nullable = nullable()
		  [<K_DEFAULT> (t = <S_CHAR_LITERAL> | t = <K_GETDATE> "(" ")")])
    |  (<K_BIT>       {column = new BooleanColumn(table, t.toString()); t = null;}) 
	       nullable = nullable() 
	      [<K_DEFAULT> (t = <S_CHAR_LITERAL>| t = <S_INTEGER>)])
	name = constraint(table.getGrain()) [<K_PRIMARY> <K_KEY> 
	      {pk = true; table.setPkConstraintName(name);} name = constraint(table.getGrain())]
	{ 
      column.setNullableAndDefault(nullable, t == null? null: ((negative? "-": "") + t.toString()));
	  column.setCelestaDocLexem(doc == null? null:doc.toString());
	  if (pk) {
	    table.addPK(column.getName());
	    table.finalizePK();
	  }
    }
	[<K_FOREIGN> <K_KEY> {fk = new ForeignKey(table); fk.addColumn(column.getName()); fk.setConstraintName(name);} references(fk)]
}

boolean nullable():
{
  boolean result = true;
}
{
[<K_NULL>         {result = true;} |<K_NOT> <K_NULL> {result = false;}] { return result;}
}

void primaryKey(Table table):{Token t;}
{
  <K_PRIMARY> <K_KEY> "(" t = <S_IDENTIFIER> {table.addPK(t.toString());}
                     ("," t = <S_IDENTIFIER> {table.addPK(t.toString());})* ")"
  {
    table.finalizePK();
  }
}

ForeignKey foreignKey(Table table):{
  Token t;
  ForeignKey fk;
}
{
<K_FOREIGN><K_KEY> { fk = new ForeignKey(table);}
   "(" t = <S_IDENTIFIER> {fk.addColumn(t.toString());}
  ("," t = <S_IDENTIFIER> {fk.addColumn(t.toString());})* ")"

  references(fk) {
  return fk;
  }
}

void references(ForeignKey fk):{
  Token t;
  Token t2 = null;
  FKRule action;
}
{
<K_REFERENCES> t = <S_IDENTIFIER> ["." t2 = <S_IDENTIFIER>]
  { if (t2 == null)
      fk.setReferencedTable("", t.toString());
	else 
	  fk.setReferencedTable(t.toString(), t2.toString());}
	  
  "(" t = <S_IDENTIFIER> {fk.addReferencedColumn(t.toString());}
  ("," t = <S_IDENTIFIER> {fk.addReferencedColumn(t.toString());})* ")"
{fk.finalizeReference();}
[<K_ON>
  ((<K_UPDATE> action = action() {fk.setUpdateRule(action);} 
    [<K_ON> <K_DELETE> action = action() {fk.setDeleteRule(action);}])
  |(<K_DELETE> action = action() {fk.setDeleteRule(action);} 
    [<K_ON> <K_UPDATE> action = action() {fk.setUpdateRule(action);}]))
]
}

FKRule action():{
  FKRule result;
}
{
   ((<K_NO> <K_ACTION> {result = FKRule.NO_ACTION;})
  |(<K_SET> <K_NULL>  {result =  FKRule.SET_NULL;})
  | (<K_CASCADE>        {result =  FKRule.CASCADE;}))
  {
    return result;
  }
}

void createIndex(Grain g, String doc):{
Token indexName;
Token tableName;
Token columnName;
Index ind;
}
{
<K_INDEX> indexName = <S_IDENTIFIER> <K_ON> tableName = <S_IDENTIFIER> 
   {ind = new Index(g, tableName.toString(), indexName.toString());
    ind.setCelestaDocLexem(doc);}
   "(" columnName = <S_IDENTIFIER> {ind.addColumn(columnName.toString());} ("," columnName = <S_IDENTIFIER>{ind.addColumn(columnName.toString());}) * ")"
   {ind.finalizeIndex();}
}

void alterTable(Grain g):{
  Token t;
  Table table;
  String name;
  ForeignKey fk;
}
{
<K_TABLE> t = <S_IDENTIFIER> {
  table = g.getTable(t.toString());
  }
<K_ADD> name = constraint(g) fk = foreignKey(table) {fk.setConstraintName(name);}
}

String constraint(Grain g):{
Token t = null;
}
{
[<K_CONSTRAINT> t = <S_IDENTIFIER>]
{
if (t == null)
  return null;
else {
  g.addConstraintName(t.toString());
  return t.toString();
} 
}
}

void createView(Grain g, String doc):
{
	View view = null;
	Token viewName = null;
}
{
<K_VIEW> viewName = <S_IDENTIFIER> <K_AS> {view = new View(g, viewName.toString());
	                            view.setCelestaDocLexem(doc);}
								select(view)
								{view.finalizeParsing();}
}

Expr sqlExpression(View v):
{ Expr result;
  List<Expr> operands = new ArrayList<Expr>(5);}
{
    result = sqlAndExpression(v)   {operands.add(result);} (<K_OR> 
	  result = sqlAndExpression(v) {operands.add(result);}
	  )*
	{return operands.size() == 1? result : new BinaryLogicalOp(v, BinaryLogicalOp.OR, operands);}
}

Expr sqlAndExpression(View v):
{ Expr result;
  List<Expr> operands = new ArrayList<Expr>(5);}
{
    result = sqlUnaryLogicalExpression(v)    {operands.add(result);} (<K_AND> 
	  result = sqlUnaryLogicalExpression(v)  {operands.add(result);}
	  )* 
	{return operands.size() == 1? result : new BinaryLogicalOp(v, BinaryLogicalOp.AND, operands);}
}

Expr sqlUnaryLogicalExpression(View v):
{ boolean isNot = false;
  Expr result;}
{
  [<K_NOT> {isNot = true;}] result = sqlRelationalExpression(v) 
  {return isNot? new NotExpr(v, result) : result; }
}

Expr sqlRelationalExpression(View v):
{ Expr result;
  Expr buf1;
  Expr buf2;
  List<Expr> operands = new ArrayList<Expr>(5);
  int relop;}
{
    result = sqlTermExpr(v)
    (   relop = relop() buf1 = sqlTermExpr(v)                            {result = new Relop(v, result, buf1, relop);}
      | (<K_IN> "(" buf1 = sqlTermExpr(v) {operands.add(buf1);} ("," buf1 = sqlTermExpr(v) {operands.add(buf1);})* ")") 
	                                                                    {result = new In(v, result, operands);}
      | (<K_BETWEEN> buf1 = sqlTermExpr(v) <K_AND> buf2 = sqlTermExpr(v)) {result = new Between(v, result, buf1, buf2);}
      | (<K_LIKE> buf1 = sqlTermExpr(v))                                 {result = new Relop(v, result, buf1, Relop.LIKE);}
      | (<K_IS> <K_NULL>)                                               {result = new IsNull(v, result);}
    )?
	{return result;}
}

int relop():
{int result;}
{ (
    "=" {result = Relop.EQ;}
  | ">" {result = Relop.GT;} ["=" {result = Relop.GTEQ;}]
  | "<" {result = Relop.LS;} ["=" {result = Relop.LSEQ;} | ">" {result = Relop.NTEQ;}]
  )
  {return result;}
}

Expr sqlTermExpr(View v):
{ Expr result;
  List<Expr> operands = new ArrayList<Expr>(5);
  int operator = -1;}
{
    result = sqlMultiplicativeExpression(v) {operands.add(result);} ( ( "+" {operator = BinaryTermOp.PLUS;}
	                                                                 | "-" {operator = BinaryTermOp.MINUS;}
																	 | "||"{operator = BinaryTermOp.CONCAT;})
                                 result =  sqlMultiplicativeExpression(v) {operands.add(result);}
                               )*
    {return operands.size() == 1? result : new BinaryTermOp(v, operator, operands);}
}

Expr sqlMultiplicativeExpression(View v):
{ Expr result;
  List<Expr> operands = new ArrayList<Expr>(5);
  int operator = -1;}
{
    result = sqlUnaryExpression(v) {operands.add(result);} (  ("*" {operator = BinaryTermOp.TIMES;} | "/" {operator = BinaryTermOp.OVER;}) 
	                     result = sqlUnaryExpression(v) {operands.add(result);}
						 )*
	{return operands.size() == 1? result : new BinaryTermOp(v, operator, operands);}
}

Expr sqlUnaryExpression(View v):
{Expr result;
boolean isMinus = false;}
{
    ["-" {isMinus = true;}] result = sqlPrimaryExpression(v) 
    {return isMinus? new UnaryMinus(v, result) : result;}
}


Expr sqlPrimaryExpression(View v):
{Expr result;
Token t = null;}
{ (
    t = <S_INTEGER>          {result = new NumericLiteral(v, t.toString());}
  | t = <S_DOUBLE>           {result = new NumericLiteral(v, t.toString());}
  | t = <S_CHAR_LITERAL>     {result = new TextLiteral(v, t.toString());}
  |  "(" result = sqlExpression(v) ")"  {result = new ParenthesizedExpr(v, result);}
  | result = fieldReference(v)         
  ) {return result;}
}

FieldRef fieldReference(View v):
{  
  String grainName = null;
  String tableName = null;
  String fieldName;
  Token t;
}
{
  t = <S_IDENTIFIER> {fieldName = t.toString();} 
  ["." t = <S_IDENTIFIER> {tableName = fieldName; fieldName = t.toString();} 
  ["." t = <S_IDENTIFIER> {grainName = tableName; tableName = fieldName; fieldName = t.toString();} ]]
  {return new FieldRef(v, grainName, tableName, fieldName);}
}

void select(View v):
{Expr where;}
{
    <K_SELECT> [ <K_DISTINCT> {v.setDistinct(true);}] selectItem(v) ("," selectItem(v))*
    <K_FROM>  fromClause(v)
    [<K_WHERE> where = sqlExpression(v) {v.setWhereCondition(where);} ]
}

void selectItem(View v):
{
  Token aliasToken = null;
  String alias = "";
  Expr expr;  
}
{
   expr = sqlTermExpr(v) [<K_AS>] [aliasToken =  <S_IDENTIFIER> {alias = aliasToken.toString();}]  
   { if (alias.isEmpty() && expr instanceof FieldRef)
		   alias = ((FieldRef) expr).getColumnName();
     v.addColumn(alias, expr); }
}

TableRef tableReference(View v):
{ TableRef result;
  Token t;
  String grainName = null;
  String tableName = null;
  String alias;
}
{
  t = <S_IDENTIFIER> {tableName = t.toString(); alias = tableName;} 
      ["." t = <S_IDENTIFIER> {grainName = tableName; tableName = t.toString(); alias = tableName;}] 
	  [<K_AS>] [t = <S_IDENTIFIER> {alias = t.toString();} ]
  
  {
     Table tab;
     if (grainName == null) {
	    tab = v.getGrain().getTable(tableName);
	 } else {
	    tab = v.getGrain().getScore().getGrain(grainName).getTable(tableName);
	 }
	 return new TableRef(tab, alias);
  }
}

void fromClause(View v):
{TableRef tRef;}
{
    tRef = tableReference(v) {v.addFromTableRef(tRef);} 
    (tRef = join(v) {v.addFromTableRef(tRef);} )*
}

TableRef join(View v):
{ TableRef tRef;
  JoinType jt;
  Expr onExpr;}
{
  (<K_INNER> {jt = JoinType.INNER;} | <K_LEFT> {jt = JoinType.LEFT;}| <K_RIGHT> {jt = JoinType.RIGHT;}| <K_FULL> {jt = JoinType.FULL;}) 
   <K_JOIN>
   tRef = tableReference(v)
   <K_ON> 
   onExpr = sqlExpression(v)
   { tRef.setJoinType(jt);
     tRef.setOnExpr(onExpr);
	 return tRef;
   }
}
